{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\n\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar rawManifest = null;\n\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nvar _ref = ExponentConstants || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\n\nvar warnedAboutManifestField = false;\n\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null\n});\n\nObject.defineProperties(constants, {\n  installationId: {\n    get: function get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest2: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  manifest: {\n    get: function get() {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n\n      var maybeManifest = getManifest();\n\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  manifest2: {\n    get: function get() {\n      var maybeManifest = getManifest();\n\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  expoConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$, _maybeManifest$extra;\n\n        return (_maybeManifest$extra$ = (_maybeManifest$extra = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra.expoClient) != null ? _maybeManifest$extra$ : null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true\n  },\n  expoGoConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$2, _maybeManifest$extra2;\n\n        return (_maybeManifest$extra$2 = (_maybeManifest$extra2 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra2.expoGo) != null ? _maybeManifest$extra$2 : null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true\n  },\n  easConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$3, _maybeManifest$extra3;\n\n        return (_maybeManifest$extra$3 = (_maybeManifest$extra3 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra3.eas) != null ? _maybeManifest$extra$3 : null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true\n  },\n  __rawManifest_TEST: {\n    get: function get() {\n      return rawManifest;\n    },\n    set: function set(value) {\n      rawManifest = value;\n    },\n    enumerable: false\n  }\n});\n\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);\n    }\n  }\n\n  return rawManifest;\n}\n\nexport default constants;","map":{"version":3,"mappings":"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","names":["CodedError","NativeModulesProxy","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","rawManifest","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","NativeModules","EXDevLauncher","devLauncherManifest","name","appOwnership","nativeConstants","warnedAboutManifestField","constants","defineProperties","installationId","get","enumerable","__unsafeNoWarnManifest","maybeManifest","getManifest","isAppManifest","__unsafeNoWarnManifest2","isManifest","__DEV__","manifest2","expoConfig","extra","expoClient","expoGoConfig","expoGo","easConfig","eas","__rawManifest_TEST","set","value","suppressWarning","invalidManifestType","executionEnvironment","Bare","Platform","OS","StoreClient","Standalone"],"sourceRoot":"","sources":["../src/Constants.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  EASConfig,\n  ExecutionEnvironment,\n  ExpoGoConfig,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutManifestField = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false,\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): AppManifest | Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): AppManifest | null {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get():\n      | (ExpoConfig & {\n          /**\n           * Only present during development using @expo/cli.\n           */\n          hostUri?: string;\n        })\n      | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  expoGoConfig: {\n    get(): ExpoGoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  easConfig: {\n    get(): EASConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): AppManifest | Manifest | null {\n      return rawManifest;\n    },\n    set(value: AppManifest | Manifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"]},"metadata":{},"sourceType":"module"}