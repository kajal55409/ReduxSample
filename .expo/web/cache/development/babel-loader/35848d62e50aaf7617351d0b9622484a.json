{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError, Platform } from 'expo-modules-core';\nimport { KeepAwakeEventState } from \"./KeepAwake.types\";\nvar wakeLockMap = {};\nexport default {\n  isAvailableAsync: function () {\n    var _isAvailableAsync = _asyncToGenerator(function* () {\n      if (Platform.isDOMAvailable) {\n        return 'wakeLock' in navigator;\n      }\n\n      return false;\n    });\n\n    function isAvailableAsync() {\n      return _isAvailableAsync.apply(this, arguments);\n    }\n\n    return isAvailableAsync;\n  }(),\n  activate: function () {\n    var _activate = _asyncToGenerator(function* (tag) {\n      if (!Platform.isDOMAvailable) {\n        return;\n      }\n\n      var wakeLock = yield navigator.wakeLock.request('screen');\n      wakeLockMap[tag] = wakeLock;\n    });\n\n    function activate(_x) {\n      return _activate.apply(this, arguments);\n    }\n\n    return activate;\n  }(),\n  deactivate: function () {\n    var _deactivate = _asyncToGenerator(function* (tag) {\n      if (!Platform.isDOMAvailable) {\n        return;\n      }\n\n      if (wakeLockMap[tag]) {\n        var _wakeLockMap$tag$rele, _wakeLockMap$tag;\n\n        (_wakeLockMap$tag$rele = (_wakeLockMap$tag = wakeLockMap[tag]).release) == null ? void 0 : _wakeLockMap$tag$rele.call(_wakeLockMap$tag);\n        delete wakeLockMap[tag];\n      } else {\n        throw new CodedError('ERR_KEEP_AWAKE_TAG_INVALID', `The wake lock with tag ${tag} has not activated yet`);\n      }\n    });\n\n    function deactivate(_x2) {\n      return _deactivate.apply(this, arguments);\n    }\n\n    return deactivate;\n  }(),\n  addListenerForTag: function addListenerForTag(tag, listener) {\n    var eventListener = function eventListener() {\n      listener({\n        state: KeepAwakeEventState.RELEASE\n      });\n    };\n\n    var sentinel = wakeLockMap[tag];\n\n    if (sentinel) {\n      if ('addEventListener' in sentinel) {\n        sentinel.addEventListener == null ? void 0 : sentinel.addEventListener('release', eventListener);\n      } else {\n        sentinel.onrelease = eventListener;\n      }\n    }\n\n    return {\n      remove: function remove() {\n        var sentinel = wakeLockMap[tag];\n\n        if (sentinel) {\n          if (sentinel.removeEventListener) {\n            sentinel.removeEventListener('release', eventListener);\n          } else {\n            sentinel.onrelease = null;\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAmD,mBAAnD;AAEA,SAASC,mBAAT;AAEA,IAAMC,WAAW,GAAqC,EAAtD;AAmBA,eAAe;EACPC,gBADO;IAAA,uDACS;MACpB,IAAIH,QAAQ,CAACI,cAAb,EAA6B;QAC3B,OAAO,cAAcC,SAArB;MACD;;MACD,OAAO,KAAP;IACD,CANY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAOPC,QAPO;IAAA,6CAOEC,GAPF,EAOa;MACxB,IAAI,CAACP,QAAQ,CAACI,cAAd,EAA8B;QAC5B;MACD;;MACD,IAAMI,QAAQ,SAASH,SAAS,CAACG,QAAV,CAAmBC,OAAnB,CAA2B,QAA3B,CAAvB;MACAP,WAAW,CAACK,GAAD,CAAX,GAAmBC,QAAnB;IACD,CAbY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAcPE,UAdO;IAAA,+CAcIH,GAdJ,EAce;MAC1B,IAAI,CAACP,QAAQ,CAACI,cAAd,EAA8B;QAC5B;MACD;;MACD,IAAIF,WAAW,CAACK,GAAD,CAAf,EAAsB;QAAA;;QACpB,wDAAW,CAACA,GAAD,CAAX,EAAiBI,OAAjB;QACA,OAAOT,WAAW,CAACK,GAAD,CAAlB;MACD,CAHD,MAGO;QACL,MAAM,IAAIR,UAAJ,CACJ,4BADI,EAEJ,0BAA0BQ,GAAG,wBAFzB,CAAN;MAID;IACF,CA3BY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EA4BbK,iBA5Ba,6BA4BKL,GA5BL,EA4BkBM,QA5BlB,EA4B6C;IACxD,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAK;MACzBD,QAAQ,CAAC;QAAEE,KAAK,EAAEd,mBAAmB,CAACe;MAA7B,CAAD,CAAR;IACD,CAFD;;IAGA,IAAMC,QAAQ,GAAGf,WAAW,CAACK,GAAD,CAA5B;;IACA,IAAIU,QAAJ,EAAc;MACZ,IAAI,sBAAsBA,QAA1B,EAAoC;QAClCA,QAAQ,CAACC,gBAAT,4BAAQ,CAACA,gBAAT,CAA4B,SAA5B,EAAuCJ,aAAvC;MACD,CAFD,MAEO;QACLG,QAAQ,CAACE,SAAT,GAAqBL,aAArB;MACD;IACF;;IACD,OAAO;MACLM,MAAM,EAAE,kBAAK;QACX,IAAMH,QAAQ,GAAGf,WAAW,CAACK,GAAD,CAA5B;;QACA,IAAIU,QAAJ,EAAc;UACZ,IAAIA,QAAQ,CAACI,mBAAb,EAAkC;YAChCJ,QAAQ,CAACI,mBAAT,CAA6B,SAA7B,EAAwCP,aAAxC;UACD,CAFD,MAEO;YACLG,QAAQ,CAACE,SAAT,GAAqB,IAArB;UACD;QACF;MACF;IAVI,CAAP;EAYD;AApDY,CAAf","names":["CodedError","Platform","KeepAwakeEventState","wakeLockMap","isAvailableAsync","isDOMAvailable","navigator","activate","tag","wakeLock","request","deactivate","release","addListenerForTag","listener","eventListener","state","RELEASE","sentinel","addEventListener","onrelease","remove","removeEventListener"],"sourceRoot":"","sources":["../src/ExpoKeepAwake.web.ts"],"sourcesContent":["import { CodedError, Platform, Subscription } from 'expo-modules-core';\n\nimport { KeepAwakeEventState, KeepAwakeListener } from './KeepAwake.types';\n\nconst wakeLockMap: Record<string, WakeLockSentinel> = {};\n\ntype WakeLockSentinel = {\n  onrelease: null | ((event: any) => void);\n  released: boolean;\n  type: 'screen';\n  release?: Function;\n\n  addEventListener?: (event: string, listener: (event: any) => void) => void;\n  removeEventListener?: (event: string, listener: (event: any) => void) => void;\n};\n\ndeclare const navigator: {\n  wakeLock: {\n    request(type: 'screen'): Promise<WakeLockSentinel>;\n  };\n};\n\n/** Wraps the webWakeLock API https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API */\nexport default {\n  async isAvailableAsync() {\n    if (Platform.isDOMAvailable) {\n      return 'wakeLock' in navigator;\n    }\n    return false;\n  },\n  async activate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    const wakeLock = await navigator.wakeLock.request('screen');\n    wakeLockMap[tag] = wakeLock;\n  },\n  async deactivate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].release?.();\n      delete wakeLockMap[tag];\n    } else {\n      throw new CodedError(\n        'ERR_KEEP_AWAKE_TAG_INVALID',\n        `The wake lock with tag ${tag} has not activated yet`\n      );\n    }\n  },\n  addListenerForTag(tag: string, listener: KeepAwakeListener): Subscription {\n    const eventListener = () => {\n      listener({ state: KeepAwakeEventState.RELEASE });\n    };\n    const sentinel = wakeLockMap[tag];\n    if (sentinel) {\n      if ('addEventListener' in sentinel) {\n        sentinel.addEventListener?.('release', eventListener);\n      } else {\n        sentinel.onrelease = eventListener;\n      }\n    }\n    return {\n      remove: () => {\n        const sentinel = wakeLockMap[tag];\n        if (sentinel) {\n          if (sentinel.removeEventListener) {\n            sentinel.removeEventListener('release', eventListener);\n          } else {\n            sentinel.onrelease = null;\n          }\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}